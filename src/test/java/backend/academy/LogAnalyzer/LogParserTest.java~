package backend.academy.LogAnalyzer;

import backend.academy.LogAnalyzer.core.LogEntry;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Locale;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

final class LogParser {
    private static final Logger LOGGER = LogManager.getLogger(LogParser.class);

    private static final DateTimeFormatter OLD_DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MMM/yyyy:HH:mm:ss Z",
            Locale.ENGLISH);
    private static final DateTimeFormatter ISO_DATE_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;

    private static final String LOG_PATTERN = "^(\\S+) - (\\S+) \\[(.+?)\\] \"(.+?)\" (\\d{3}) (\\d+) \"(.*?)\" \"(.*?)\"$";

    private LogParser() {
        throw new UnsupportedOperationException("Utility class");
    }

    /**
     * Парсит строку лога и возвращает Optional<LogEntry>.
     *
     * @param line
     *            строка лога
     *
     * @return Optional<LogEntry> с данными о записи или пустой Optional для невалидных строк
     */
    public static Optional<LogEntry> parseLine(String line) {
        if (line == null || line.isBlank()) {
            return Optional.empty();
        }

        Pattern pattern = Pattern.compile(LOG_PATTERN);
        Matcher matcher = pattern.matcher(line);

        if (!matcher.matches()) {
            LOGGER.debug("Строка не соответствует шаблону: {}", line);
            return Optional.empty();
        }

        try {
            String remoteAddr = matcher.group(1);
            String remoteUser = matcher.group(2);
            String timeLocalStr = matcher.group(3);
            String request = matcher.group(4);
            int status = Integer.parseInt(matcher.group(5));
            long bodyBytesSent = Long.parseLong(matcher.group(6));
            String httpReferer = matcher.group(7);
            String httpUserAgent = matcher.group(8);

            ZonedDateTime timeLocal = parseDate(timeLocalStr);

            return Optional.of(new LogEntry(remoteAddr, remoteUser, timeLocal, request, status, bodyBytesSent,
                    httpReferer, httpUserAgent));
        } catch (Exception e) {
            LOGGER.debug("Ошибка при разборе строки: {}. Причина: {}", line, e.getMessage());
            return Optional.empty();
        }
    }

    private static ZonedDateTime parseDate(String dateStr) {
        try {
            return ZonedDateTime.parse(dateStr, ISO_DATE_FORMATTER);
        } catch (DateTimeParseException e) {
            return ZonedDateTime.parse(dateStr, OLD_DATE_FORMATTER);
        }
    }
}
